/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\tv.glb --transform 
Files: .\tv.glb [271.7KB] > C:\Users\jaind\Workshop\frontend\src\Models\tv-transformed.glb [29.27KB] (89%)
Author: assetfactory (https://sketchfab.com/assetfactory)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/generic-television-set-bda5bb7328e64e688f5359d51e15e656
Title: Generic Television set
*/

import React, { useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import scene from "./tv-transformed.glb"
import * as THREE from "three";
import Peer from "peerjs";

export default function Model(props) {
  
  const { nodes, materials } = useGLTF(scene)
  const {isScreenSharing, setIsScreenSharing, videoTexture, setVideoTexture, peers, players}=props
  const [screenLive, setScreenLive]=useState(false)
  async function screenShare() {
    console.log('yaya')
    setScreenLive(true)
    const newPeer= new Peer()
    try {
      // Request the screen-sharing stream
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: true, audio: true
      });
      // newPeer.on("open", (id) => {
      //   console.log("Peer ID:", id);
  
        // Call all connected peers
        const connectedCalls={}
        peers.forEach((peerId) => {
          if(!peerId) return
          console.log(peerId)
          if(connectedCalls[peerId]) return;
          const call = newPeer.call(peerId, stream, {metadata:{screenShare:true}});
          if(call){
            connectedCalls[peerId]=call
          }
          console.log("Calling peer:", peerId);
          console.log(call)
          // call.on("close", () => {
          //   console.log("Call closed with peer:", peerId);
          //   setVideoTexture(null);
          // });
        // });
      });
      // Create a video element and set the stream as its source
      const video = document.createElement("video");
      video.srcObject = stream;
      video.play();

      // Create a video texture for Three.js
      const texture = new THREE.VideoTexture(video);
      texture.minFilter = THREE.LinearFilter;
      texture.magFilter = THREE.LinearFilter;
      texture.format = THREE.RGBAFormat;

      setVideoTexture(texture);

    } catch (err) {
      console.error("Error accessing screen sharing:", err);
    }
  }
  useEffect(()=>{
    console.log("yayayay")
    if(isScreenSharing && !screenLive && !videoTexture) screenShare()
  }, [isScreenSharing])
  return (
    <group  dispose={null}>
      <mesh geometry={nodes.Cylinder001_ConectorMetal_0.geometry} material={videoTexture? new THREE.MeshBasicMaterial({ map: videoTexture }):materials.PaletteMaterial001} position={[118.208-110, -86.48+170, -9.268]} scale={100} />
      <mesh geometry={nodes.Cube005_Screen_0.geometry}  material={materials.PaletteMaterial002} position={[0-110, -39.314+170, 0.064]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh geometry={nodes.Cube003_ConectorNegroPlastic_0.geometry} material={materials.PaletteMaterial003} position={[0-110, -170.738+170, 79.083]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
    </group>
  )
}

useGLTF.preload('/tv-transformed.glb')
