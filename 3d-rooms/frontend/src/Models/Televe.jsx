/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\Televe.glb --transform 
Files: .\Televe.glb [16.46KB] > C:\Users\jaind\Workshop\frontend\src\Models\Televe-transformed.glb [4KB] (76%)
Author: CN Entertainment (https://sketchfab.com/cn-entertainment)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tv-1b7eff20a86b4cc692bc4222ac1ac252
Title: TV
*/

import React, { useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import scene from "./Televe-transformed.glb"
import * as THREE from "three";
import Peer from "peerjs";
export default function Televe(props) {
  const { nodes, materials } = useGLTF(scene)
  const {isScreenSharing, setIsScreenSharing, videoTexture, setVideoTexture, peers, players}=props
  const [screenLive, setScreenLive]=useState(false)
  async function screenShare() {
    console.log('yaya')
    setScreenLive(true)
    const newPeer= new Peer()
    try {
      // Request the screen-sharing stream
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: true, audio: true
      });
      // newPeer.on("open", (id) => {
        //   console.log("Peer ID:", id);
        
        // Call all connected peers
        const connectedCalls={}
        peers.forEach((peerId) => {
          if(!peerId) return
          console.log(peerId)
          if(connectedCalls[peerId]) return;
          const call = newPeer.call(peerId, stream, {metadata:{screenShare:true}});
          if(call){
            connectedCalls[peerId]=call
          }
          console.log("Calling peer:", peerId);
          console.log(call)
          // call.on("close", () => {
            //   console.log("Call closed with peer:", peerId);
            //   setVideoTexture(null);
            // });
            // });
          });
          // Create a video element and set the stream as its source
          const video = document.createElement("video");
          video.srcObject = stream;
          video.play();
          console.log(video)
          
          // Create a video texture for Three.js
          const texture = new THREE.VideoTexture(video);
          texture.minFilter = THREE.LinearFilter;
          texture.magFilter = THREE.LinearFilter;
          texture.format = THREE.RGBAFormat;
          console.log(texture)

      setVideoTexture(texture);

    } catch (err) {
      console.error("Error accessing screen sharing:", err);
    }
  }
  useEffect(()=>{
    console.log("yayayay")
    if(isScreenSharing && !screenLive && !videoTexture) screenShare()
  }, [isScreenSharing])
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.TV_49Zoll_Black_0.geometry} material={videoTexture? new THREE.MeshBasicMaterial({ map: videoTexture }):materials.Black} position={[2.55, 50, -0.022]} scale={100}/>
      <mesh geometry={nodes.TV_49Zoll_RedLight_0.geometry} material={materials.RedLight} position={[2.55, 50, -0.022]} scale={100}/>
      <mesh geometry={nodes.TV_49Zoll_Screen1_0.geometry} material={videoTexture? new THREE.MeshBasicMaterial({ map: videoTexture }):materials.Screen1} position={[2.55, 50, -0.022]} scale={100}/>
    </group>
  )
}

useGLTF.preload('/Televe-transformed.glb')
